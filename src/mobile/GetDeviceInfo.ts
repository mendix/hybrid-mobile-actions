// This file was generated by Mendix Modeler.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the code between BEGIN USER CODE and END USER CODE
// Other code you write will be lost the next time you deploy the project.

/**
 * @returns {MxObject}
 */
function GetDeviceInfo(): Promise<mendix.lib.MxObject> {
    // BEGIN USER CODE
    if (!cordova.getAppVersion) {
        throw new Error("cordova-plugin-app-version not enabled");
    }

    if (!window.device) {
        throw new Error("cordova-plugin-device not enabled");
    }

    return Promise.all([
        createMxObject("HybridMobileActions.DeviceInfo"),
        cordova.getAppVersion.getAppName(),
        cordova.getAppVersion.getPackageName(),
        cordova.getAppVersion.getVersionNumber()
    ]).then(results => {
        const mxObject = results[0];
        const appName = results[1];
        const packageName = results[2];
        const versionNumber = results[3];
        mxObject.set("ApplicationName", appName);
        mxObject.set("BundleId", packageName);
        mxObject.set("Version", versionNumber);
        mxObject.set("Manufacturer", window.device!.manufacturer);
        mxObject.set("Model", window.device!.model);
        mxObject.set("SystemName", window.device!.platform);
        mxObject.set("SystemVersion", window.device!.version);
        mxObject.set("UniqueId", window.device!.uuid);
        mxObject.set("IsEmulator", window.device!.isVirtual);

        return mxObject;
    });

    function createMxObject(entity: string): Promise<mendix.lib.MxObject> {
        return new Promise((resolve, reject) => {
            mx.data.create({
                entity,
                callback: mxObject => resolve(mxObject),
                error: () => reject(`Could not create '${entity}' object to store device info`)
            });
        });
    }
    // END USER CODE
}
